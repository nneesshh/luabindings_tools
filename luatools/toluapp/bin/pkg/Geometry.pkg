//#ifndef GODOT_CPP__GEOMETRY_HPP
//#define GODOT_CPP__GEOMETRY_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {


class Object;
class _Geometry : public Object {
public:


	// enums

	// constants

	// methods
	static Array build_box_planes(const Vector3 extents);
	static Array build_cylinder_planes(const double radius, const double height, const int64_t sides, const int64_t axis = 2);
	static Array build_capsule_planes(const double radius, const double height, const int64_t sides, const int64_t lats, const int64_t axis = 2);
	static double segment_intersects_circle(const Vector2 segment_from, const Vector2 segment_to, const Vector2 circle_position, const double circle_radius);
	static Variant segment_intersects_segment_2d(const Vector2 from_a, const Vector2 to_a, const Vector2 from_b, const Vector2 to_b);
	static Variant line_intersects_line_2d(const Vector2 from_a, const Vector2 dir_a, const Vector2 from_b, const Vector2 dir_b);
	static PoolVector2Array get_closest_points_between_segments_2d(const Vector2 p1, const Vector2 q1, const Vector2 p2, const Vector2 q2);
	static PoolVector3Array get_closest_points_between_segments(const Vector3 p1, const Vector3 p2, const Vector3 q1, const Vector3 q2);
	static Vector2 get_closest_point_to_segment_2d(const Vector2 point, const Vector2 s1, const Vector2 s2);
	static Vector3 get_closest_point_to_segment(const Vector3 point, const Vector3 s1, const Vector3 s2);
	static Vector2 get_closest_point_to_segment_uncapped_2d(const Vector2 point, const Vector2 s1, const Vector2 s2);
	static Vector3 get_closest_point_to_segment_uncapped(const Vector3 point, const Vector3 s1, const Vector3 s2);
	static int64_t get_uv84_normal_bit(const Vector3 normal);
	static Variant ray_intersects_triangle(const Vector3 from, const Vector3 dir, const Vector3 a, const Vector3 b, const Vector3 c);
	static Variant segment_intersects_triangle(const Vector3 from, const Vector3 to, const Vector3 a, const Vector3 b, const Vector3 c);
	static PoolVector3Array segment_intersects_sphere(const Vector3 from, const Vector3 to, const Vector3 sphere_position, const double sphere_radius);
	static PoolVector3Array segment_intersects_cylinder(const Vector3 from, const Vector3 to, const double height, const double radius);
	static PoolVector3Array segment_intersects_convex(const Vector3 from, const Vector3 to, const Array planes);
	static bool point_is_inside_triangle(const Vector2 point, const Vector2 a, const Vector2 b, const Vector2 c);
	static PoolIntArray triangulate_polygon(const PoolVector2Array polygon);
	static PoolVector2Array convex_hull_2d(const PoolVector2Array points);
	static PoolVector3Array clip_polygon(const PoolVector3Array points, const Plane plane);
	static Dictionary make_atlas(const PoolVector2Array sizes);
};

}

//#endif
