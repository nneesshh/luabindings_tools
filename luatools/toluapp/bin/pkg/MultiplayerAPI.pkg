//#ifndef GODOT_CPP_MULTIPLAYERAPI_HPP
//#define GODOT_CPP_MULTIPLAYERAPI_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {

class Object;
class NetworkedMultiplayerPeer;

class Reference;
class MultiplayerAPI : public Reference {
public:


	// enums
	enum RPCMode {
		RPC_MODE_SLAVESYNC = 7,
		RPC_MODE_MASTER = 3,
		RPC_MODE_SLAVE = 4,
		RPC_MODE_DISABLED = 0,
		RPC_MODE_REMOTE = 1,
		RPC_MODE_SYNC = 2,
		RPC_MODE_MASTERSYNC = 6,
		RPC_MODE_REMOTESYNC = 5,
	};

	// constants

	// methods
	void set_root_node(const Object *node);
	Error send_bytes(const PoolByteArray bytes, const int64_t id = 0, const int64_t mode = 2);
	bool has_network_peer() const;
	godot__ref_NetworkedMultiplayerPeer_ get_network_peer() const;
	int64_t get_network_unique_id() const;
	bool is_network_server() const;
	int64_t get_rpc_sender_id() const;
	void _add_peer(const int64_t id);
	void _del_peer(const int64_t id);
	void set_network_peer(const godot__ref_NetworkedMultiplayerPeer_ peer);
	void poll();
	void clear();
	void _connected_to_server();
	void _connection_failed();
	void _server_disconnected();
	PoolIntArray get_network_connected_peers() const;
	void set_refuse_new_network_connections(const bool refuse);
	bool is_refusing_new_network_connections() const;
};

}

//#endif
