//#ifndef GODOT_CPP_DYNAMICFONT_HPP
//#define GODOT_CPP_DYNAMICFONT_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {

class DynamicFontData;

class Font;
class DynamicFont : public Font {
public:


	// enums
	enum SpacingType {
		SPACING_BOTTOM = 1,
		SPACING_TOP = 0,
		SPACING_CHAR = 2,
		SPACING_SPACE = 3,
	};

	// constants

	// methods
	void set_font_data(const godot__ref_DynamicFontData_ data);
	godot__ref_DynamicFontData_ get_font_data() const;
	void set_size(const int64_t data);
	int64_t get_size() const;
	void set_outline_size(const int64_t size);
	int64_t get_outline_size() const;
	void set_outline_color(const Color color);
	Color get_outline_color() const;
	void set_use_mipmaps(const bool enable);
	bool get_use_mipmaps() const;
	void set_use_filter(const bool enable);
	bool get_use_filter() const;
	void set_spacing(const int64_t type, const int64_t value);
	int64_t get_spacing(const int64_t type) const;
	void add_fallback(const godot__ref_DynamicFontData_ data);
	void set_fallback(const int64_t idx, const godot__ref_DynamicFontData_ data);
	godot__ref_DynamicFontData_ get_fallback(const int64_t idx) const;
	void remove_fallback(const int64_t idx);
	int64_t get_fallback_count() const;
};

}

//#endif
