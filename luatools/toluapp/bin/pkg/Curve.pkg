//#ifndef GODOT_CPP_CURVE_HPP
//#define GODOT_CPP_CURVE_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {


class Resource;
class Curve : public Resource {
public:


	// enums
	enum TangentMode {
		TANGENT_FREE = 0,
		TANGENT_MODE_COUNT = 2,
		TANGENT_LINEAR = 1,
	};

	// constants

	// methods
	int64_t add_point(const Vector2 position, const double left_tangent = 0, const double right_tangent = 0, const int64_t left_mode = 0, const int64_t right_mode = 0);
	void remove_point(const int64_t index);
	void clear_points();
	Vector2 get_point_position(const int64_t index) const;
	void set_point_value(const int64_t index, const double y);
	int64_t set_point_offset(const int64_t index, const double offset);
	double interpolate(const double offset) const;
	double interpolate_baked(const double offset);
	double get_point_left_tangent(const int64_t index) const;
	double get_point_right_tangent(const int64_t index) const;
	Curve::TangentMode get_point_left_mode(const int64_t index) const;
	Curve::TangentMode get_point_right_mode(const int64_t index) const;
	void set_point_left_tangent(const int64_t index, const double tangent);
	void set_point_right_tangent(const int64_t index, const double tangent);
	void set_point_left_mode(const int64_t index, const int64_t mode);
	void set_point_right_mode(const int64_t index, const int64_t mode);
	double get_min_value() const;
	void set_min_value(const double min);
	double get_max_value() const;
	void set_max_value(const double max);
	void clean_dupes();
	void bake();
	int64_t get_bake_resolution() const;
	void set_bake_resolution(const int64_t resolution);
	Array _get_data() const;
	void _set_data(const Array data);
};

}

//#endif
