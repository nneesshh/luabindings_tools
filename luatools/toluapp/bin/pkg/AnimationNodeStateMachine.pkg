//#ifndef GODOT_CPP_ANIMATIONNODESTATEMACHINE_HPP
//#define GODOT_CPP_ANIMATIONNODESTATEMACHINE_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {

class AnimationNode;
class AnimationNodeStateMachineTransition;

class AnimationRootNode;
class AnimationNodeStateMachine : public AnimationRootNode {
public:


	// enums

	// constants

	// methods
	void add_node(const String name, const godot__ref_AnimationNode_ node, const Vector2 position = Vector2(0, 0));
	godot__ref_AnimationNode_ get_node(const String name) const;
	void remove_node(const String name);
	void rename_node(const String name, const String new_name);
	bool has_node(const String name) const;
	String get_node_name(const godot__ref_AnimationNode_ node) const;
	void set_node_position(const String name, const Vector2 position);
	Vector2 get_node_position(const String name) const;
	bool has_transition(const String from, const String to) const;
	void add_transition(const String from, const String to, const godot__ref_AnimationNodeStateMachineTransition_ transition);
	godot__ref_AnimationNodeStateMachineTransition_ get_transition(const int64_t idx) const;
	String get_transition_from(const int64_t idx) const;
	String get_transition_to(const int64_t idx) const;
	int64_t get_transition_count() const;
	void remove_transition_by_index(const int64_t idx);
	void remove_transition(const String from, const String to);
	void set_start_node(const String name);
	String get_start_node() const;
	void set_end_node(const String name);
	String get_end_node() const;
	void set_graph_offset(const Vector2 name);
	Vector2 get_graph_offset() const;
	void _tree_changed();
};

}

//#endif
