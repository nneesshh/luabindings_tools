//#ifndef GODOT_CPP_COLLISIONOBJECT2D_HPP
//#define GODOT_CPP_COLLISIONOBJECT2D_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {

class Object;
class InputEvent;
class Shape2D;

class Node2D;
class CollisionObject2D : public Node2D {
public:


	// enums

	// constants

	// methods
	void _input_event(const Object *viewport, const godot__ref_InputEvent_ event, const int64_t shape_idx);
	RID get_rid() const;
	void set_pickable(const bool enabled);
	bool is_pickable() const;
	int64_t create_shape_owner(const Object *owner);
	void remove_shape_owner(const int64_t owner_id);
	Array get_shape_owners();
	void shape_owner_set_transform(const int64_t owner_id, const Transform2D transform);
	Transform2D shape_owner_get_transform(const int64_t owner_id) const;
	Object *shape_owner_get_owner(const int64_t owner_id) const;
	void shape_owner_set_disabled(const int64_t owner_id, const bool disabled);
	bool is_shape_owner_disabled(const int64_t owner_id) const;
	void shape_owner_set_one_way_collision(const int64_t owner_id, const bool enable);
	bool is_shape_owner_one_way_collision_enabled(const int64_t owner_id) const;
	void shape_owner_add_shape(const int64_t owner_id, const godot__ref_Shape2D_ shape);
	int64_t shape_owner_get_shape_count(const int64_t owner_id) const;
	godot__ref_Shape2D_ shape_owner_get_shape(const int64_t owner_id, const int64_t shape_id) const;
	int64_t shape_owner_get_shape_index(const int64_t owner_id, const int64_t shape_id) const;
	void shape_owner_remove_shape(const int64_t owner_id, const int64_t shape_id);
	void shape_owner_clear_shapes(const int64_t owner_id);
	int64_t shape_find_owner(const int64_t shape_index) const;
};

}

//#endif
