//#ifndef GODOT_CPP_ARVRSERVER_HPP
//#define GODOT_CPP_ARVRSERVER_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {

class ARVRInterface;
class ARVRPositionalTracker;

class Object;
class ARVRServer : public Object {
public:


	// enums
	enum RotationMode {
		DONT_RESET_ROTATION = 2,
		RESET_BUT_KEEP_TILT = 1,
		RESET_FULL_ROTATION = 0,
	};
	enum TrackerType {
		TRACKER_UNKNOWN = 128,
		TRACKER_CONTROLLER = 1,
		TRACKER_ANY = 255,
		TRACKER_BASESTATION = 2,
		TRACKER_ANCHOR = 4,
		TRACKER_ANY_KNOWN = 127,
	};

	// constants

	// methods
	static double get_world_scale();
	static void set_world_scale(const double arg0);
	static Transform get_reference_frame();
	static void center_on_hmd(const int64_t rotation_mode, const bool keep_height);
	static Transform get_hmd_transform();
	static int64_t get_interface_count();
	static godot__ref_ARVRInterface_ get_interface(const int64_t idx);
	static Array get_interfaces();
	static godot__ref_ARVRInterface_ find_interface(const String name);
	static int64_t get_tracker_count();
	static ARVRPositionalTracker *get_tracker(const int64_t idx);
	static godot__ref_ARVRInterface_ get_primary_interface();
	static void set_primary_interface(const godot__ref_ARVRInterface_ interface);
	static int64_t get_last_process_usec();
	static int64_t get_last_commit_usec();
	static int64_t get_last_frame_usec();
};

}

//#endif
