//#ifndef GODOT_CPP_KINEMATICBODY_HPP
//#define GODOT_CPP_KINEMATICBODY_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {

class KinematicCollision;

class PhysicsBody;
class KinematicBody : public PhysicsBody {
public:


	// enums

	// constants

	// methods
	godot__ref_KinematicCollision_ move_and_collide(const Vector3 rel_vec, const bool infinite_inertia = true, const bool test_only = false);
	Vector3 move_and_slide(const Vector3 linear_velocity, const Vector3 floor_normal = Vector3(0, 0, 0), const bool stop_on_slope = false, const int64_t max_slides = 4, const double floor_max_angle = 0.785398, const bool infinite_inertia = true);
	Vector3 move_and_slide_with_snap(const Vector3 linear_velocity, const Vector3 snap, const Vector3 floor_normal = Vector3(0, 0, 0), const bool infinite_inertia = true, const bool stop_on_slope = false, const int64_t max_bounces = 4, const double floor_max_angle = 0.785398);
	bool test_move(const Transform from, const Vector3 rel_vec, const bool infinite_inertia);
	bool is_on_floor() const;
	bool is_on_ceiling() const;
	bool is_on_wall() const;
	Vector3 get_floor_velocity() const;
	void set_axis_lock(const int64_t axis, const bool lock);
	bool get_axis_lock(const int64_t axis) const;
	void set_safe_margin(const double pixels);
	double get_safe_margin() const;
	int64_t get_slide_count() const;
	godot__ref_KinematicCollision_ get_slide_collision(const int64_t slide_idx);
};

}

//#endif
