//#ifndef GODOT_CPP_EDITORPLUGIN_HPP
//#define GODOT_CPP_EDITORPLUGIN_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {

class InputEvent;
class Control;
class Camera;
class Object;
class ConfigFile;
class ToolButton;
class Script;
class Texture;
class UndoRedo;
class EditorImportPlugin;
class EditorSceneImporter;
class EditorExportPlugin;
class EditorInspectorPlugin;
class EditorInterface;
class ScriptCreateDialog;

class Node;
class EditorPlugin : public Node {
public:


	// enums
	enum DockSlot {
		DOCK_SLOT_RIGHT_UR = 6,
		DOCK_SLOT_RIGHT_UL = 4,
		DOCK_SLOT_LEFT_BL = 1,
		DOCK_SLOT_LEFT_UR = 2,
		DOCK_SLOT_LEFT_UL = 0,
		DOCK_SLOT_RIGHT_BR = 7,
		DOCK_SLOT_MAX = 8,
		DOCK_SLOT_LEFT_BR = 3,
		DOCK_SLOT_RIGHT_BL = 5,
	};
	enum CustomControlContainer {
		CONTAINER_TOOLBAR = 0,
		CONTAINER_CANVAS_EDITOR_BOTTOM = 8,
		CONTAINER_CANVAS_EDITOR_SIDE_LEFT = 6,
		CONTAINER_SPATIAL_EDITOR_SIDE_LEFT = 2,
		CONTAINER_PROPERTY_EDITOR_BOTTOM = 9,
		CONTAINER_SPATIAL_EDITOR_MENU = 1,
		CONTAINER_SPATIAL_EDITOR_BOTTOM = 4,
		CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT = 3,
		CONTAINER_CANVAS_EDITOR_SIDE_RIGHT = 7,
		CONTAINER_CANVAS_EDITOR_MENU = 5,
	};

	// constants

	// methods
	bool forward_canvas_gui_input(const godot__ref_InputEvent_ event);
	void forward_draw_over_viewport(const Control *overlay);
	void forward_force_draw_over_viewport(const Control *overlay);
	bool forward_spatial_gui_input(const Camera *camera, const godot__ref_InputEvent_ event);
	String get_plugin_name();
	Object *get_plugin_icon();
	bool has_main_screen();
	void make_visible(const bool visible);
	void edit(const Object *object);
	bool handles(const Object *object);
	Dictionary get_state();
	void set_state(const Dictionary state);
	void clear();
	void save_external_data();
	void apply_changes();
	PoolStringArray get_breakpoints();
	void set_window_layout(const godot__ref_ConfigFile_ layout);
	void get_window_layout(const godot__ref_ConfigFile_ layout);
	bool build();
	void add_control_to_container(const int64_t container, const Object *control);
	ToolButton *add_control_to_bottom_panel(const Object *control, const String title);
	void add_control_to_dock(const int64_t slot, const Object *control);
	void remove_control_from_docks(const Object *control);
	void remove_control_from_bottom_panel(const Object *control);
	void remove_control_from_container(const int64_t container, const Object *control);
	void add_tool_menu_item(const String name, const Object *handler, const String callback, const Variant ud = Variant());
	void add_tool_submenu_item(const String name, const Object *submenu);
	void remove_tool_menu_item(const String name);
	void add_custom_type(const String type, const String base, const godot__ref_Script_ script, const godot__ref_Texture_ icon);
	void remove_custom_type(const String type);
	void add_autoload_singleton(const String name, const String path);
	void remove_autoload_singleton(const String name);
	int64_t update_overlays() const;
	void make_bottom_panel_item_visible(const Object *item);
	void hide_bottom_panel();
	UndoRedo *get_undo_redo();
	void queue_save_layout() const;
	void add_import_plugin(const godot__ref_EditorImportPlugin_ importer);
	void remove_import_plugin(const godot__ref_EditorImportPlugin_ importer);
	void add_scene_import_plugin(const godot__ref_EditorSceneImporter_ scene_importer);
	void remove_scene_import_plugin(const godot__ref_EditorSceneImporter_ scene_importer);
	void add_export_plugin(const godot__ref_EditorExportPlugin_ plugin);
	void remove_export_plugin(const godot__ref_EditorExportPlugin_ plugin);
	void add_inspector_plugin(const godot__ref_EditorInspectorPlugin_ plugin);
	void remove_inspector_plugin(const godot__ref_EditorInspectorPlugin_ plugin);
	void set_input_event_forwarding_always_enabled();
	void set_force_draw_over_forwarding_enabled();
	EditorInterface *get_editor_interface();
	ScriptCreateDialog *get_script_create_dialog();
};

}

//#endif
