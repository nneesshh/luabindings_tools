//#ifndef GODOT_CPP_KINEMATICBODY2D_HPP
//#define GODOT_CPP_KINEMATICBODY2D_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {

class KinematicCollision2D;
class Object;

class PhysicsBody2D;
class KinematicBody2D : public PhysicsBody2D {
public:


	// enums

	// constants

	// methods
	godot__ref_KinematicCollision2D_ move_and_collide(const Vector2 rel_vec, const bool infinite_inertia = true, const bool exclude_raycast_shapes = true, const bool test_only = false);
	Vector2 move_and_slide(const Vector2 linear_velocity, const Vector2 floor_normal = Vector2(0, 0), const bool infinite_inertia = true, const bool stop_on_slope = false, const int64_t max_bounces = 4, const double floor_max_angle = 0.785398);
	Vector2 move_and_slide_with_snap(const Vector2 linear_velocity, const Vector2 snap, const Vector2 floor_normal = Vector2(0, 0), const bool infinite_inertia = true, const bool stop_on_slope = false, const int64_t max_bounces = 4, const double floor_max_angle = 0.785398);
	bool test_move(const Transform2D from, const Vector2 rel_vec, const bool infinite_inertia);
	bool is_on_floor() const;
	bool is_on_ceiling() const;
	bool is_on_wall() const;
	Vector2 get_floor_velocity() const;
	void set_safe_margin(const double pixels);
	double get_safe_margin() const;
	int64_t get_slide_count() const;
	godot__ref_KinematicCollision2D_ get_slide_collision(const int64_t slide_idx);
	void set_sync_to_physics(const bool enable);
	bool is_sync_to_physics_enabled() const;
	void _direct_state_changed(const Object *arg0);
};

}

//#endif
