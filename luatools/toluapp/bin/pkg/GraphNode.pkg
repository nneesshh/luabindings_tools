//#ifndef GODOT_CPP_GRAPHNODE_HPP
//#define GODOT_CPP_GRAPHNODE_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {

class InputEvent;
class Texture;

class Container;
class GraphNode : public Container {
public:


	// enums
	enum Overlay {
		OVERLAY_BREAKPOINT = 1,
		OVERLAY_DISABLED = 0,
		OVERLAY_POSITION = 2,
	};

	// constants

	// methods
	void set_title(const String title);
	String get_title() const;
	void _gui_input(const godot__ref_InputEvent_ arg0);
	void set_slot(const int64_t idx, const bool enable_left, const int64_t type_left, const Color color_left, const bool enable_right, const int64_t type_right, const Color color_right, const godot__ref_Texture_ custom_left = nullptr, const godot__ref_Texture_ custom_right = nullptr);
	void clear_slot(const int64_t idx);
	void clear_all_slots();
	bool is_slot_enabled_left(const int64_t idx) const;
	int64_t get_slot_type_left(const int64_t idx) const;
	Color get_slot_color_left(const int64_t idx) const;
	bool is_slot_enabled_right(const int64_t idx) const;
	int64_t get_slot_type_right(const int64_t idx) const;
	Color get_slot_color_right(const int64_t idx) const;
	void set_offset(const Vector2 offset);
	Vector2 get_offset() const;
	void set_comment(const bool comment);
	bool is_comment() const;
	void set_resizable(const bool resizable);
	bool is_resizable() const;
	void set_selected(const bool selected);
	bool is_selected();
	int64_t get_connection_output_count();
	int64_t get_connection_input_count();
	Vector2 get_connection_output_position(const int64_t idx);
	int64_t get_connection_output_type(const int64_t idx);
	Color get_connection_output_color(const int64_t idx);
	Vector2 get_connection_input_position(const int64_t idx);
	int64_t get_connection_input_type(const int64_t idx);
	Color get_connection_input_color(const int64_t idx);
	void set_show_close_button(const bool show);
	bool is_close_button_visible() const;
	void set_overlay(const int64_t overlay);
	GraphNode::Overlay get_overlay() const;
};

}

//#endif
