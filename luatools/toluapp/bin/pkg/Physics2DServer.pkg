//#ifndef GODOT_CPP_PHYSICS2DSERVER_HPP
//#define GODOT_CPP_PHYSICS2DSERVER_HPP


$#include <stdint.h>

$#include "UsingGodot.hpp"


namespace godot {

class Physics2DDirectSpaceState;
class Object;
class Physics2DTestMotionResult;
class Physics2DDirectBodyState;

class Object;
class Physics2DServer : public Object {
public:


	// enums
	enum ProcessInfo {
		INFO_COLLISION_PAIRS = 1,
		INFO_ISLAND_COUNT = 2,
		INFO_ACTIVE_OBJECTS = 0,
	};
	enum AreaBodyStatus {
		AREA_BODY_REMOVED = 1,
		AREA_BODY_ADDED = 0,
	};
	enum DampedStringParam {
		DAMPED_STRING_REST_LENGTH = 0,
		DAMPED_STRING_STIFFNESS = 1,
		DAMPED_STRING_DAMPING = 2,
	};
	enum BodyMode {
		BODY_MODE_CHARACTER = 3,
		BODY_MODE_KINEMATIC = 1,
		BODY_MODE_STATIC = 0,
		BODY_MODE_RIGID = 2,
	};
	enum ShapeType {
		SHAPE_CAPSULE = 5,
		SHAPE_SEGMENT = 2,
		SHAPE_CIRCLE = 3,
		SHAPE_RECTANGLE = 4,
		SHAPE_CUSTOM = 8,
		SHAPE_RAY = 1,
		SHAPE_LINE = 0,
		SHAPE_CONVEX_POLYGON = 6,
		SHAPE_CONCAVE_POLYGON = 7,
	};
	enum JointParam {
		JOINT_PARAM_MAX_FORCE = 2,
		JOINT_PARAM_MAX_BIAS = 1,
		JOINT_PARAM_BIAS = 0,
	};
	enum SpaceParameter {
		SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD = 4,
		SPACE_PARAM_BODY_TIME_TO_SLEEP = 5,
		SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD = 3,
		SPACE_PARAM_CONTACT_RECYCLE_RADIUS = 0,
		SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS = 6,
		SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION = 2,
		SPACE_PARAM_CONTACT_MAX_SEPARATION = 1,
	};
	enum JointType {
		JOINT_PIN = 0,
		JOINT_GROOVE = 1,
		JOINT_DAMPED_SPRING = 2,
	};
	enum CCDMode {
		CCD_MODE_CAST_SHAPE = 2,
		CCD_MODE_CAST_RAY = 1,
		CCD_MODE_DISABLED = 0,
	};
	enum BodyState {
		BODY_STATE_ANGULAR_VELOCITY = 2,
		BODY_STATE_LINEAR_VELOCITY = 1,
		BODY_STATE_SLEEPING = 3,
		BODY_STATE_TRANSFORM = 0,
		BODY_STATE_CAN_SLEEP = 4,
	};
	enum BodyParameter {
		BODY_PARAM_MAX = 7,
		BODY_PARAM_GRAVITY_SCALE = 4,
		BODY_PARAM_MASS = 2,
		BODY_PARAM_FRICTION = 1,
		BODY_PARAM_BOUNCE = 0,
		BODY_PARAM_ANGULAR_DAMP = 6,
		BODY_PARAM_LINEAR_DAMP = 5,
		BODY_PARAM_INERTIA = 3,
	};
	enum AreaSpaceOverrideMode {
		AREA_SPACE_OVERRIDE_REPLACE = 3,
		AREA_SPACE_OVERRIDE_DISABLED = 0,
		AREA_SPACE_OVERRIDE_COMBINE_REPLACE = 2,
		AREA_SPACE_OVERRIDE_REPLACE_COMBINE = 4,
		AREA_SPACE_OVERRIDE_COMBINE = 1,
	};
	enum AreaParameter {
		AREA_PARAM_PRIORITY = 7,
		AREA_PARAM_GRAVITY_IS_POINT = 2,
		AREA_PARAM_GRAVITY = 0,
		AREA_PARAM_GRAVITY_DISTANCE_SCALE = 3,
		AREA_PARAM_ANGULAR_DAMP = 6,
		AREA_PARAM_GRAVITY_POINT_ATTENUATION = 4,
		AREA_PARAM_LINEAR_DAMP = 5,
		AREA_PARAM_GRAVITY_VECTOR = 1,
	};

	// constants

	// methods
	static RID line_shape_create();
	static RID ray_shape_create();
	static RID segment_shape_create();
	static RID circle_shape_create();
	static RID rectangle_shape_create();
	static RID capsule_shape_create();
	static RID convex_polygon_shape_create();
	static RID concave_polygon_shape_create();
	static void shape_set_data(const RID shape, const Variant data);
	static Physics2DServer::ShapeType shape_get_type(const RID shape);
	static Variant shape_get_data(const RID shape);
	static RID space_create();
	static void space_set_active(const RID space, const bool active);
	static bool space_is_active(const RID space);
	static void space_set_param(const RID space, const int64_t param, const double value);
	static double space_get_param(const RID space, const int64_t param);
	static Physics2DDirectSpaceState *space_get_direct_state(const RID space);
	static RID area_create();
	static void area_set_space(const RID area, const RID space);
	static RID area_get_space(const RID area);
	static void area_set_space_override_mode(const RID area, const int64_t mode);
	static Physics2DServer::AreaSpaceOverrideMode area_get_space_override_mode(const RID area);
	static void area_add_shape(const RID area, const RID shape, const Transform2D transform = Transform2D());
	static void area_set_shape(const RID area, const int64_t shape_idx, const RID shape);
	static void area_set_shape_transform(const RID area, const int64_t shape_idx, const Transform2D transform);
	static void area_set_shape_disabled(const RID area, const int64_t shape_idx, const bool disable);
	static int64_t area_get_shape_count(const RID area);
	static RID area_get_shape(const RID area, const int64_t shape_idx);
	static Transform2D area_get_shape_transform(const RID area, const int64_t shape_idx);
	static void area_remove_shape(const RID area, const int64_t shape_idx);
	static void area_clear_shapes(const RID area);
	static void area_set_collision_layer(const RID area, const int64_t layer);
	static void area_set_collision_mask(const RID area, const int64_t mask);
	static void area_set_param(const RID area, const int64_t param, const Variant value);
	static void area_set_transform(const RID area, const Transform2D transform);
	static Variant area_get_param(const RID area, const int64_t param);
	static Transform2D area_get_transform(const RID area);
	static void area_attach_object_instance_id(const RID area, const int64_t id);
	static int64_t area_get_object_instance_id(const RID area);
	static void area_set_monitor_callback(const RID area, const Object *receiver, const String method);
	static void area_set_area_monitor_callback(const RID area, const Object *receiver, const String method);
	static void area_set_monitorable(const RID area, const bool monitorable);
	static RID body_create();
	static void body_set_space(const RID body, const RID space);
	static RID body_get_space(const RID body);
	static void body_set_mode(const RID body, const int64_t mode);
	static Physics2DServer::BodyMode body_get_mode(const RID body);
	static void body_add_shape(const RID body, const RID shape, const Transform2D transform = Transform2D());
	static void body_set_shape(const RID body, const int64_t shape_idx, const RID shape);
	static void body_set_shape_transform(const RID body, const int64_t shape_idx, const Transform2D transform);
	static void body_set_shape_metadata(const RID body, const int64_t shape_idx, const Variant metadata);
	static int64_t body_get_shape_count(const RID body);
	static RID body_get_shape(const RID body, const int64_t shape_idx);
	static Transform2D body_get_shape_transform(const RID body, const int64_t shape_idx);
	static Variant body_get_shape_metadata(const RID body, const int64_t shape_idx);
	static void body_remove_shape(const RID body, const int64_t shape_idx);
	static void body_clear_shapes(const RID body);
	static void body_set_shape_disabled(const RID body, const int64_t shape_idx, const bool disable);
	static void body_set_shape_as_one_way_collision(const RID body, const int64_t shape_idx, const bool enable);
	static void body_attach_object_instance_id(const RID body, const int64_t id);
	static int64_t body_get_object_instance_id(const RID body);
	static void body_set_continuous_collision_detection_mode(const RID body, const int64_t mode);
	static Physics2DServer::CCDMode body_get_continuous_collision_detection_mode(const RID body);
	static void body_set_collision_layer(const RID body, const int64_t layer);
	static int64_t body_get_collision_layer(const RID body);
	static void body_set_collision_mask(const RID body, const int64_t mask);
	static int64_t body_get_collision_mask(const RID body);
	static void body_set_param(const RID body, const int64_t param, const double value);
	static double body_get_param(const RID body, const int64_t param);
	static void body_set_state(const RID body, const int64_t state, const Variant value);
	static Variant body_get_state(const RID body, const int64_t state);
	static void body_apply_central_impulse(const RID body, const Vector2 impulse);
	static void body_apply_torque_impulse(const RID body, const double impulse);
	static void body_apply_impulse(const RID body, const Vector2 position, const Vector2 impulse);
	static void body_add_central_force(const RID body, const Vector2 force);
	static void body_add_force(const RID body, const Vector2 offset, const Vector2 force);
	static void body_add_torque(const RID body, const double torque);
	static void body_set_axis_velocity(const RID body, const Vector2 axis_velocity);
	static void body_add_collision_exception(const RID body, const RID excepted_body);
	static void body_remove_collision_exception(const RID body, const RID excepted_body);
	static void body_set_max_contacts_reported(const RID body, const int64_t amount);
	static int64_t body_get_max_contacts_reported(const RID body);
	static void body_set_omit_force_integration(const RID body, const bool enable);
	static bool body_is_omitting_force_integration(const RID body);
	static void body_set_force_integration_callback(const RID body, const Object *receiver, const String method, const Variant userdata = Variant());
	static bool body_test_motion(const RID body, const Transform2D from, const Vector2 motion, const bool infinite_inertia, const double margin = 0.08, const godot__ref_Physics2DTestMotionResult_ result = nullptr);
	static Physics2DDirectBodyState *body_get_direct_state(const RID body);
	static void joint_set_param(const RID joint, const int64_t param, const double value);
	static double joint_get_param(const RID joint, const int64_t param);
	static RID pin_joint_create(const Vector2 anchor, const RID body_a, const RID body_b = RID());
	static RID groove_joint_create(const Vector2 groove1_a, const Vector2 groove2_a, const Vector2 anchor_b, const RID body_a = RID(), const RID body_b = RID());
	static RID damped_spring_joint_create(const Vector2 anchor_a, const Vector2 anchor_b, const RID body_a, const RID body_b = RID());
	static void damped_string_joint_set_param(const RID joint, const int64_t param, const double value);
	static double damped_string_joint_get_param(const RID joint, const int64_t param);
	static Physics2DServer::JointType joint_get_type(const RID joint);
	static void free_rid(const RID rid);
	static void set_active(const bool active);
	static int64_t get_process_info(const int64_t process_info);
};

}

//#endif
