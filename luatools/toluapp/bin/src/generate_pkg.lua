package.path = package.path .. ";./?.lua;./lua/?.lua;./lua/?/init.lua;./src/?.lua;./src/?/init.lua;./lua/protobuf/?.lua;./lua/proto_pb/?.lua"
package.cpath = package.cpath .. ";./?.dll;./clibs/?.dll"

--[[
package.path =
    package.path ..
    ";D:/www/_nneesshh_git/ZeroBraneStudio53/lualibs/?/?.lua;D:/www/_nneesshh_git/ZeroBraneStudio53/lualibs/?.lua"
package.cpath =
    package.cpath ..
    ";D:/www/_nneesshh_git/ZeroBraneStudio53/bin/?.dll;D:/www/_nneesshh_git/ZeroBraneStudio53/bin/clibs/?.dll"

--require('mobdebug').start('192.168.1.110') --<-- only insert this line
]]
local lib_json = require("json")
local sb = require("stringbuffer")
local tbl_unpack = unpack or table.unpack

local function __load_file_content(filepath)
    local f, err = io.open(filepath, "r")
    if f then
        local contents = f:read("*a")
        io.close(f)
        f = nil
        return contents
    end
end

local function __load_json(path)
    local content = __load_file_content(path)
    if content then
        local data, _, msg = lib_json:decode(content) -- Ignore the second value - it's the character the issue was found on
        return data
    end
end

--
local helper = require("godot_api_helper")

local function __generate_pkg(json_path, pkg_path_base)
    local classes = __load_json(json_path)

    local icalls = {}

    local tolua_bat_path = "./__auto_gen_godot_bindings.bat"
    local tolua_bat_file, err = io.open(tolua_bat_path, "w")
    tolua_bat_file:write([[REM Generated by "generate_pkg.lua".  DO NOT EDIT!
REM source: godot_api.json
]])

    local godot_bindings_header_path = "./out/__auto_godot_bindings.hpp"
    local godot_bindings_header_file, err = io.open(godot_bindings_header_path, "w")
    godot_bindings_header_file:write([[// Generated by "generate_pkg.lua".  DO NOT EDIT!
// source: godot_api.json
]])

    local godot_bindings_cpp_path = "./out/__auto_godot_bindings.cpp"
    local godot_bindings_cpp_file, err = io.open(godot_bindings_cpp_path, "w")
    godot_bindings_cpp_file:write([[// Generated by "generate_pkg.lua".  DO NOT EDIT!
// source: godot_api.json
#include "stdafx.h"

#include "__auto_godot_bindings.hpp"

void godot_bindings_open_all(lua_State* L)
{
]])

    local godot_global_enum_typename_path = "./src/__auto_godot_global_enum_typename.lua"
    local godot_global_enum_typename_file, err = io.open(godot_global_enum_typename_path, "w")
    godot_global_enum_typename_file:write([[-- Generated by "generate_pkg.lua".  DO NOT EDIT!
-- source: godot_api.json
]])

    local global_enum_typename_map = {}
    
    local godot_global_enums_hpp_path = "./out/__auto_godot_global_enums.hpp"
    local godot_global_enums_hpp_file, err = io.open(godot_global_enums_hpp_path, "w")
    godot_global_enums_hpp_file:write([[// Generated by "generate_pkg.lua".  DO NOT EDIT!
// source: godot_api.json
]])
    local global_enum_value_map = {}
    local global_const_value_map = {}

    local godot_ref_type_path = "./out/__auto_godot_ref_typedefs.inc"
    local godot_ref_type_file, err = io.open(godot_ref_type_path, "w")
    godot_ref_type_file:write([[// Generated by "generate_pkg.lua".  DO NOT EDIT!
// source: godot_api.json
]])

    local ref_type_map = {}

    for i, c in ipairs(classes) do
        -- # print c['name']
        local pkg_filename = helper.strip_name_all_leading_(c["name"])
        local pkg_path = pkg_path_base .. "/" .. pkg_filename .. ".pkg"
        local pkg_file, err = io.open(pkg_path, "w")

        print(i, "generating: " .. pkg_path)

        local used_classes = helper.get_used_classes(c)
        local header = helper.generate_class_header(icalls, used_classes, classes, c, global_enum_typename_map, global_enum_value_map, global_const_value_map, ref_type_map)

        if not pkg_file then
            print("open file error: ", err)
        else
            pkg_file:write(header)
            pkg_file:close()

            tolua_bat_file:write(
                'tolua++.exe -L "src/basic_patch.lua" -H "out/Lua' ..
                    pkg_filename .. '.hpp" -o "out/Lua' .. pkg_filename .. '.cpp" ' .. pkg_path .. "\n"
            )
            godot_bindings_header_file:write('#include "Lua' .. pkg_filename .. '.hpp"\n')
            godot_bindings_cpp_file:write('    tolua_' .. pkg_filename .. '_open(L);\n')
        end
    end

    --[[
    icall_header_file = open("src/__icalls.hpp", "w+")
    icall_header_file.write(generate_icall_header(icalls))
    ]]

    -- enum typename
    godot_global_enum_typename_file:write("local _M = {\n")
    for enum_typename, b in pairs(global_enum_typename_map) do
        godot_global_enum_typename_file:write("    [\"" .. enum_typename .. "\"]=" .. tostring(b) .. ",\n")
    end
    godot_global_enum_typename_file:write("}\nreturn _M")
    godot_global_enum_typename_file:close()

    -- global_enum_value_map
    for name, t in pairs(global_enum_value_map) do
        for _, v in ipairs(t) do
            -- begin of enum
            godot_global_enums_hpp_file:write([[
enum class godot__]] .. name .. "__" .. v.enum_name .. "\n" .. [[
{
]])
            for _, kk in ipairs(v.enum_values) do
                godot_global_enums_hpp_file:write("    " .. kk.k1 .. " = " .. tostring(kk.k2) .. ",\n")
            end

            -- end of enum
            godot_global_enums_hpp_file:write([[
}; // end of enum godot__]] .. name .. "__" .. v.enum_name .. "\n\n" .. [[
]])            
        end
    end

    -- global_const_value_map
    for name, t in pairs(global_const_value_map) do
        for _, v in ipairs(t) do
            -- begin of enum
            godot_global_enums_hpp_file:write([[
enum class godot__]] .. v.c_name .. "\n" .. [[
{
]])
            for _, kk in ipairs(v.values) do
                godot_global_enums_hpp_file:write("    " .. kk.k1 .. " = " .. tostring(kk.k2) .. ",\n")
            end

            -- end of enum
            godot_global_enums_hpp_file:write([[
}; // end of enum godot__]] .. v.c_name .. "\n\n" .. [[
]])            
        end
    end

    godot_global_enums_hpp_file:close()

    -- ref type
    for _, v in pairs(ref_type_map) do
        godot_ref_type_file:write(v .. "\n")
    end
    godot_ref_type_file:close()

    -- bat
    tolua_bat_file:close()

    godot_bindings_header_file:write("\n/* open bindings */\nextern void godot_bindings_open_all();")
    godot_bindings_header_file:close()

    godot_bindings_cpp_file:write("\n}")
    godot_bindings_cpp_file:close()
end

-- generate
local src = "godot_api.json"
local dst = "pkg"

__generate_pkg(src, dst)
